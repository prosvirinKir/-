This is pdfTeX, Version 3.14159265-2.6-1.40.18 (TeX Live 2017) (preloaded format=pdflatex 2018.4.24)  25 JUN 2021 20:56
entering extended mode
 restricted \write18 enabled.
 %&-line parsing enabled.
**res_table.tex
(./res_table.tex
LaTeX2e <2017-04-15>
Babel <3.10> and hyphenation patterns for 84 language(s) loaded.

! LaTeX Error: Missing \begin{document}.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.1 \begin{tabular}
                   {|m{4.2cm}|>{\centering}m{3cm}|>{\centering}m{3cm}|c|}
You're in trouble here.  Try typing  <return>  to proceed.
If that doesn't work, type  X <return>  to quit.

LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <7> on input line 1.
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <5> on input line 1.
! Use of \@array doesn't match its definition.
\@ifnextchar ... \reserved@d =#1\def \reserved@a {
                                                  #2}\def \reserved@b {#3}\f...
l.1 ...>{\centering}m{3cm}|>{\centering}m{3cm}|c|}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Argument of \@firstoftwo has an extra }.
<inserted text> 
                \par 
l.1 ...>{\centering}m{3cm}|>{\centering}m{3cm}|c|}
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \@firstoftwo was complete.
<to be read again> 
                   \par 
l.1 ...>{\centering}m{3cm}|>{\centering}m{3cm}|c|}
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Use of \@array doesn't match its definition.
\@xexpast #1*#2#3#4\@@ ->\edef \reserved@a {
                                            #1}\@tempcnta #2\relax \ifnum \@...
l.1 ...>{\centering}m{3cm}|>{\centering}m{3cm}|c|}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \@array doesn't match its definition.
\@ifnextchar ... \reserved@d =#1\def \reserved@a {
                                                  #2}\def \reserved@b {#3}\f...
l.1 ...>{\centering}m{3cm}|>{\centering}m{3cm}|c|}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \@argtabularcr doesn't match its definition.
\@ifnextchar ...eserved@d =#1\def \reserved@a {#2}
                                                  \def \reserved@b {#3}\futu...
l.1 ...>{\centering}m{3cm}|>{\centering}m{3cm}|c|}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \@array doesn't match its definition.
\@xexpast #1*#2#3#4\@@ ->\edef \reserved@a {
                                            #1}\@tempcnta #2\relax \ifnum \@...
l.1 ...>{\centering}m{3cm}|>{\centering}m{3cm}|c|}
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

Runaway argument?
|m{4.2cm}|>{\let {\let \reserved@d =*\def 
! Paragraph ended before \reserved@b was complete.
<to be read again> 
                   \par 
l.1 ...>{\centering}m{3cm}|>{\centering}m{3cm}|c|}
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\reserved@a ...@unexpandable@protect \let \@sharp 
                                                  \relax \let \@startpbox \r...
l.1 ...>{\centering}m{3cm}|>{\centering}m{3cm}|c|}
                                                  
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \relax 
l.1 ...>{\centering}m{3cm}|>{\centering}m{3cm}|c|}
                                                  
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \relax 
l.1 ...>{\centering}m{3cm}|>{\centering}m{3cm}|c|}
                                                  
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, nd, nc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

)
! Incomplete \iffalse; all text was ignored after line 1.
<inserted text> 
                \fi 
<*> res_table.tex
                 
The file ended while I was skipping conditional text.
This kind of error happens when you say `\if...' and forget
the matching `\fi'. I've inserted a `\fi'; this might work.

! Emergency stop.
<*> res_table.tex
                 
*** (job aborted, no legal \end found)

 
Here is how much of TeX's memory you used:
 7 strings out of 492995
 163 string characters out of 6132704
 54074 words of memory out of 5000000
 3660 multiletter control sequences out of 15000+600000
 3640 words of font info for 14 fonts, out of 8000000 for 9000
 1141 hyphenation exceptions out of 8191
 19i,4n,30p,132b,68s stack positions out of 5000i,500n,10000p,200000b,80000s
!  ==> Fatal error occurred, no output PDF file produced!
